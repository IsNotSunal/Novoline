package cc.novoline.modules.exploits;

import cc.novoline.events.EventTarget;
import cc.novoline.events.events.LoadWorldEvent;
import cc.novoline.events.events.PacketEvent;
import cc.novoline.events.events.TickUpdateEvent;
import cc.novoline.utils.ServerUtils;
import cc.novoline.utils.Servers;
import cc.novoline.utils.Timer;
import net.minecraft.client.Minecraft;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class Disabler {

    private int transactions;
    private List<Packet> listTransactions = new CopyOnWriteArrayList();
    private Timer timer = new Timer();
    private int key;

    @EventTarget
    public void onPacket(PacketEvent event) {
        if (ServerUtils.isHypixel() && !ServerUtils.serverIs(Servers.LOBBY)) {
            if (event.getState().equals(PacketEvent.State.OUTGOING)) {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction) event.getPacket();

                    if (packet.getID() < 0) {
                        transactions++;

                        if (transactions > 10) {
                            listTransactions.add(packet);
                            event.setCancelled(true);
                        }
                    }
                }

                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive packet = (C00PacketKeepAlive) event.getPacket();
                    key = packet.getKey();
                    event.setCancelled(true);
                }
            }

            if (!Minecraft.getInstance().player.onGround && event.getPacket() instanceof C0BPacketEntityAction) {
                C0BPacketEntityAction packet = (C0BPacketEntityAction) event.getPacket();

                if (packet.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                    event.setCancelled(true);
                }
            }
        }
    }

    @EventTarget
    public void onLoadWorld(LoadWorldEvent event) {
        transactions = 0;
        listTransactions.clear();
    }

    @EventTarget
    public void onTick(TickUpdateEvent event) {
        if (ServerUtils.isHypixel() && !ServerUtils.serverIs(Servers.LOBBY) && transactions > 10) {
            int tick = Minecraft.getInstance().player.ticksExisted;

            if (!listTransactions.isEmpty() && tick > 0 && tick % 32 == 0) {
                listTransactions.forEach(Minecraft.getInstance().getNetHandler()::sendPacketNoEvent);
                Minecraft.getInstance().getNetHandler().sendPacketNoEvent(new C00PacketKeepAlive(key));
                listTransactions.clear();
            }
        }
    }
}
